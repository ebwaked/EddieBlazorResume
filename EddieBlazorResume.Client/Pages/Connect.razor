@page "/connect"

<h3>Connect</h3>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json
@using System.Text

<MudAlert Severity="Severity.Warning">
    In progress: Finished building the basic form with validation, need to hook up SMTP Server and deploy as an Azure Function App.
    <br />
    Code for SMTP Azure Function in this GitHub repo
</MudAlert>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <div class="d-flex">
                    <MudText>Select connection type</MudText>
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                        <MudRadio Option="@("Personal")">Personal</MudRadio>
                        <MudRadio Option="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I am ready to connect!" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="(()=>SubmitVoid())" Class="ml-auto">Connect!</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudForm form;
    MudTextField<string> pwField1;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private void SubmitVoid()
    {
        form.Validate();
        if (form.IsValid)
        {
            SendMail();
        }
    }

    private async void SendMail()
    {
        var requestUri = "secret";

        using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, requestUri))
        {
            var body = form?.Model?.ToString();

            request.Content = new StringContent(JsonConvert.SerializeObject(body), Encoding.UTF8, "application/json");

            var httpClient = new HttpClient
                {
                    BaseAddress = new Uri("http://www.google.com")
                };

            HttpResponseMessage responseMsg = await httpClient.SendAsync(request).ConfigureAwait(false);

            if (responseMsg == null)
            {
                throw new InvalidOperationException(
                    string.Format(
                        "The response message was null when executing operation {0}.",
                        request.Method));
            }

            //return responseMsg;
        }
    }
}