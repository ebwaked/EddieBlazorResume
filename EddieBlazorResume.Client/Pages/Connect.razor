@using System.Text.Json
@using Shared
@inject HttpClient HttpClient

@page "/connect"

<h3>Connect - Via an Azure Function App using a Sendgrid decorator</h3>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json
@using System.Text

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" Model="@contact" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Name" @bind-Value="@contact.Name" Required="true" RequiredError="Name is required!" />
                <MudTextField T="string" Label="Email" @bind-Value="@contact.Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Message" @bind-Value="@contact.Message" Required="false" />
                <div class="d-flex">
                    <MudText>Select connection type</MudText>
                    <MudRadioGroup T="string" @bind-Value="@contact.ConnectionType" Required="true" RequiredError="Account type is required!">
                        <MudRadio Option="@("Personal")">Personal</MudRadio>
                        <MudRadio Option="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I am ready to connect!" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="(()=>SubmitVoid())" Class="ml-auto">Connect!</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudAlert Severity="Severity.Info">@statusMessage</MudAlert>
        </MudPaper>
    </MudItem>
    @if (errors.Length > 0)
    {
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">@($"Form Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudForm form;
    private string? statusMessage;
    public EmailRequest emailRequest = new EmailRequest();
    public Contact contact = new Contact();

    private void SubmitVoid()
    {
        form.Validate();
        if (form.IsValid)
        {
            SendMail();
        }
    }

    private async void SendMail()
    {
        emailRequest.Body = JsonConvert.SerializeObject(form.Model);
        emailRequest.Subject = "Inquiry from DevEddie.com";
        emailRequest.ToEmail = "eddie.waked+inquiries@gmail.com";

        try
        {
            var response = await HttpClient.PostAsJsonAsync("SendEmail", emailRequest);

            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Email sent successfully!";
                contact.Email = null;
                contact.Message = null;
                contact.Name = null;
            }
            else
            {
                statusMessage = $"Failed to send email. Status: {response.StatusCode}";
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }
}